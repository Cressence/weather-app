{"version":3,"sources":["store/root/rootReducer.ts","store/configureStore.ts","components/Wrapper/Wrapper.tsx","pages/Loading/Loading.tsx","routes.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["rootReducer","combineReducers","store","middleware","compose","applyMiddleware","thunk","createStore","configureStore","Wrapper","props","children","className","Card","CardContent","Loading","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OASeA,EAJKC,YAAgB,ICAvBC,EAEb,WAEI,IAAMC,EAAaC,YAAQC,YAAgBC,MAK3C,OAFcC,YAAYP,EAAa,GAAIG,GAPzBK,G,gECiBPC,EAbC,SAACC,GAA6C,IACnDC,EAAYD,EAAZC,SACP,OACI,qBAAKC,UAAU,oBAAf,SACI,cAACC,EAAA,EAAD,CAAMD,UAAU,kBAAhB,SACI,cAACE,EAAA,EAAD,UACKH,SCUNI,G,MApBC,WACZ,OACI,cAAC,EAAD,UACI,qBAAKH,UAAU,oBAAf,SACI,gCACI,mBAAGA,UAAU,cAAb,0BACA,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,oBCAxBI,EAXA,WAEb,OACE,cAAC,WAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAJC,eAIkBC,UAAWJ,SCYpCK,EAZH,SAACV,GAAqB,IACxBR,EAAWQ,EAAXR,MAER,OACE,cAAC,IAAD,CAAUA,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SCFOmB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK9B,MAAOA,MAEd+B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fbf61345.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n//Import reducers\n// import auth from \"./auth\";\n\nconst rootReducer = combineReducers({\n//   auth,\n});\n\nexport default rootReducer;","import { Store, createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './root/rootReducer';\n\nexport const store =  configureStore();\n\nfunction configureStore(): Store {\n    // Build middleware\n    const middleware = compose(applyMiddleware(thunk));\n\n    //Create store\n    const store = createStore(rootReducer, {}, middleware);\n\n    return store;\n}","import React from 'react';\nimport {Card, CardContent} from '@material-ui/core';\n\nimport './wrapper.scss';\n\ninterface WrapperProps {\n    children: React.ReactChild\n}\n\nconst Wrapper = (props: WrapperProps): React.ReactElement => {\n    const {children} = props;\n    return(\n        <div className='wrapper-container'>\n            <Card className='wrapper-content'>\n                <CardContent>\n                    {children}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nexport default Wrapper;","import React from 'react';\n\nimport Wrapper from './../../components/Wrapper';\nimport './loading.scss';\n\nconst Loading = ( ) => {\n    return (\n        <Wrapper>\n            <div className='loading-container'>\n                <div>\n                    <p className='loader-text'>Almost there</p>\n                    <div className=\"loader\">\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                    </div>\n                </div>\n                \n            </div>\n        </Wrapper>\n    );\n}\n\nexport default Loading;","import {Fragment} from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Loading from './pages/Loading';\n\n\nconst Routes = () => {\n  const defaultPath = \"/weather-app\"\n  return (\n    <Fragment>\n      <Switch>\n        <Route exact path={defaultPath} component={Loading} />\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport { Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes';\n\ninterface AllProps {\n  store: Store;\n}\n\nconst App = (props: AllProps) => {\n  const { store }  = props;\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store } from './store/configureStore';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}