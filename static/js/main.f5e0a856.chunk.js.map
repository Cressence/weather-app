{"version":3,"sources":["store/root/constants.ts","store/root/weatherInfo.reducer.ts","store/root/rootReducer.ts","store/configureStore.ts","components/Wrapper/Wrapper.tsx","utils/helper.ts","pages/WeatherInfo/components/Weathercard/WeatherCard.tsx","pages/WeatherInfo/components/BarChart/BarChart.tsx","store/root/action.ts","pages/WeatherInfo/WeatherInfo.tsx","pages/Loading/Loading.tsx","routes.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["WEATHER_SUCCESS","initialState","weatherData","weatherInfo","state","action","type","data","cod","weather","completeData","list","count","length","singleWeather","info","temperature","main","temp","pressure","description","icon","date","dt_txt","humidity","tempCollection","slice","push","appError","undefined","message","rootReducer","combineReducers","store","middleware","compose","applyMiddleware","thunk","createStore","configureStore","Wrapper","props","children","className","Card","CardContent","getCurrentDate","today","Date","getDay","getMonth","getDate","getFullYear","getCurrentTime","pad","getHours","getMinutes","formatDate","month","formatedDate","getUTCFullYear","minAndSec","newDate","time","WeatherCard","unit","onClick","alt","src","BarChart","temps","forEach","tableData","console","log","tickSize","showLine","valueField","argumentField","text","getWeatherDataPromise","city","tempUnit","a","fetch","then","Promise","resolve","json","response","getWeatherData","dispatch","resp","catch","WeatherInfo","React","useState","setTempUnit","selectedInfo","setSelectedInfo","useSelector","useDispatch","useEffect","FormControl","RadioGroup","row","aria-label","name","value","onChange","event","target","FormControlLabel","control","Radio","color","label","ArrowBack","fontSize","ArrowForward","Grid","container","spacing","map","index","item","xs","sm","md","Loading","Routes","defaultPath","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5e0a856.chunk.js","sourcesContent":["export const WEATHER_SUCCESS = 'WEATHER_SUCCESS';\nexport const WEATHER_FAILURE = 'WEATHER_FAILURE';","import { WEATHER_SUCCESS } from \"./constants\";\nimport Weather from \"./../../api/models/weather.model\";\n\nconst initialState: any = {\n    weatherData: [],\n  };\n\nconst weatherInfo = (state = initialState, action: any) => {\n    switch (action.type) {\n        case WEATHER_SUCCESS: {\n          if (action.data.cod === \"200\") {\n            let weather: Weather[] = [];\n            const completeData = action.data.list;\n            for (let count = 0; count < completeData.length; count += 8) {\n              const singleWeather = completeData[count];\n              let info: Weather = {\n                temperature: singleWeather.main.temp,\n                pressure: singleWeather.main.pressure,\n                description: singleWeather.weather[0].description,\n                icon: singleWeather.weather[0].icon,\n                date: singleWeather.dt_txt,\n                humidity: singleWeather.main.humidity,\n                tempCollection: [completeData.slice(count, count + 7)]\n              }\n              weather.push(info);\n            }\n\n            return {\n              ...state,\n              weatherData: weather,\n            };\n          } else {\n            return {\n              ...state,\n              appError:\n                action.data.message !== undefined ? action.data.message : \"\",\n            };\n          }\n        }\n        default:\n          return state;\n      }\n}\n\nexport default weatherInfo;","import { combineReducers } from 'redux';\n\n//Import reducers\nimport weatherInfo from \"./weatherInfo.reducer\";\n\nconst rootReducer = combineReducers({\n    weatherInfo,\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>","import { Store, createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './root/rootReducer';\n\nexport const store =  configureStore();\n\nfunction configureStore(): Store {\n    // Build middleware\n    const middleware = compose(applyMiddleware(thunk));\n\n    //Create store\n    const store = createStore(rootReducer, {}, middleware);\n\n    return store;\n}","import React from 'react';\nimport {Card, CardContent} from '@material-ui/core';\n\nimport './wrapper.scss';\n\ninterface WrapperProps {\n    children: React.ReactChild\n}\n\nconst Wrapper = (props: WrapperProps): React.ReactElement => {\n    const {children} = props;\n    return(\n        <div className='wrapper-container'>\n            <Card className='wrapper-content'>\n                <CardContent>\n                    {children}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nexport default Wrapper;","export const getCurrentDate = () => {\n    const today = new Date();\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return `${weekdays[today.getDay()]}, ${months[today.getMonth()]} ${today.getDate()}, ${today.getFullYear()}`;\n};\n\nexport const getCurrentTime = () => {\n    const today = new Date();\n    return `${pad(today.getHours())}:${pad(today.getMinutes())}`;\n};\n\nexport const getAmPm = () => {\n    const today = new Date();\n    return today.getHours() >= 12 ? 'PM' : 'AM';\n}\n\nexport const getCurrentLocation = () => {\n    return 'Munchen';  \n};\n\nexport const convertMonthToText = (month: number) => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    return months[month];\n};\n\nexport const convertkelvinToFahrenheit = (kelvin: number) => {\n    return round((((kelvin - 273.15) * 1.8) + 32), 1);\n};\n\nexport const convertKelvinToCelcius = (kelvin: number) => {    \n    return round((kelvin - 273.15), 1);\n};\n\nexport const formatDate = (date: string) => {\n    const formatedDate = new Date(date);\n    return `${formatedDate.getDate()} ${convertMonthToText(formatedDate.getMonth())} ${formatedDate.getUTCFullYear()}`;\n};\n\nexport const minAndSec = (date:string) => {\n    const newDate = new Date(date);\n    return `${pad(newDate.getHours())}:${pad(newDate.getMinutes())}`;\n};\n\nconst round = (value:number, precision:number) => {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n};\n\nconst pad = (time:number) =>  time < 10 ? '0' + time : time;\n","import Weather from '../../../../api/models/weather.model';\nimport { formatDate } from '../../../../utils/helper';\nimport './weatherCard.scss';\n\ninterface WeatherProps {\n    unit: string;\n    onClick: any;\n    weatherInfo: Weather\n}\n\nconst WeatherCard = (props: WeatherProps) => {\n    const {unit, onClick, weatherInfo} = props;\n    return (\n        <div className='weather-card-container' onClick={() => onClick(weatherInfo)}>\n            <img className='weather-icon' alt='weather-icon' src={`https://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`} />\n            <p className='temperature-text'>\n                <span> { weatherInfo.temperature }</span> {' '} <span>\n                    <sup>o</sup>\n                    {unit === 'celcius'? 'C' : 'F'}\n                </span>\n            </p>\n            <p className='temp-description'>{weatherInfo.description}</p>\n            <div>\n                <p className='medium-text'>Date: {formatDate(weatherInfo.date)}</p>\n                <p className='medium-text'><span>Pressure: </span> <span>{weatherInfo.pressure}</span><span>Pa</span></p>\n                <p className='medium-text'><span>Humidity: </span> <span>{weatherInfo.humidity}</span><span>Pa</span></p>\n            </div>\n        </div>\n    );\n}\n\nexport default WeatherCard;","import React from 'react';\nimport {\n  Chart,\n  BarSeries,\n  Title,\n  ArgumentAxis,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { Animation } from '@devexpress/dx-react-chart';\n\nimport './barchart.scss';\nimport Weather from '../../../../api/models/weather.model';\nimport { minAndSec } from '../../../../utils/helper';\n\ninterface BarChartProps {\n    temps: Weather;\n}\n\nconst BarChart = (props: BarChartProps) => {\n    const { temps } =  props;\n    const data:any = [];\n    temps.tempCollection[0].forEach((temp:any) => {\n        const tableData = {\n            time: minAndSec(temp.dt_txt),\n            temperature: temp.main.temp\n        }\n        \n        data.push(tableData);\n    });\n    console.log(data);\n    return (\n        <div className='bar-chart-container'>\n            <Chart data={data}>\n                <ArgumentAxis tickSize={3} showLine={false} />\n\n                <BarSeries\n                    valueField=\"temperature\"\n                    argumentField=\"time\"\n                />\n                <Title text=\"2021 Nov 20\" />\n                <Animation />\n            </Chart> \n        </div>\n        \n    );\n};\n\nexport default BarChart;","import { WEATHER_FAILURE, WEATHER_SUCCESS } from \"./constants\";\n\nconst APPID = '75f972b80e26f14fe6c920aa6a85ad57';\n\n\nconst getWeatherDataPromise = async (city:string, tempUnit:string) => {\n    const unit = tempUnit === 'celcius'? 'metric' : 'imperial'\n    try {\n        return fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${APPID}&units=${unit}`)\n        .then((data) => {\n            return new Promise(resolve => {\n                resolve(data.json());\n            })\n            .then(response => {\n                return response;\n            })\n        })\n    } catch (error) {\n        console.log(error);\n        \n    }\n};\n\nexport const getWeatherData = (city: string, tempUnit:string) => (dispatch: any) => {\n    return getWeatherDataPromise(city, tempUnit)\n    .then((resp) => {\n        dispatch({\n            type: WEATHER_SUCCESS,\n            data: resp,\n          });\n    })\n    .catch((resp) => {\n        console.log(\"resp error: \", resp);\n        dispatch({\n          type: WEATHER_FAILURE,\n          data: resp,\n        });\n      });\n};","import React, { useEffect } from 'react';\nimport { Radio, RadioGroup, FormControlLabel, FormControl, Grid } from \"@material-ui/core\";\nimport { ArrowBack, ArrowForward } from \"@material-ui/icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\"\n\nimport Wrapper from './../../components/Wrapper';\nimport WeatherCard from \"./components/Weathercard\";\nimport BarChart from './components/BarChart';\nimport { \n    getCurrentTime,\n    getCurrentDate,\n    getCurrentLocation,\n    getAmPm,\n} from \"./../../utils/helper\";\nimport './weatherInfo.scss';\nimport { getWeatherData } from \"./../../store/root/action\";\nimport { RootState } from '../../store/root/rootReducer';\nimport Weather from \"./../../api/models/weather.model\";\n\nconst WeatherInfo = () => {\n    // Component state\n    const [tempUnit, setTempUnit] = React.useState<string>('celcius');\n    const [selectedInfo, setSelectedInfo] = React.useState<Weather | null>(null);\n\n    // Redux state\n    const { weatherInfo } = useSelector((state: RootState) => ({\n        weatherInfo: state.weatherInfo.weatherData\n    }));\n      const dispatch: Dispatch<any> = useDispatch();\n\n    const toggleTempUnit = (event: any) => {\n        setTempUnit(event.target.value);\n        dispatch(getWeatherData('Munich,de', event.target.value));\n    }\n\n    const onWeatherCardClick = (selectedCard:Weather) => {\n        setSelectedInfo(selectedCard);\n    }\n\n    useEffect(() => {\n        dispatch(getWeatherData('Munich,de', tempUnit));\n    }, [dispatch, tempUnit]);\n    console.log(selectedInfo);\n    \n    return (\n        <Wrapper>\n            <div className='weather-info-container'>\n                <div className='current-location'>\n                    <div>\n                        <p className='time-section'><span className='time-text'>{getCurrentTime()}</span> <span className='am-pm'>{getAmPm()}</span></p>\n                        <p className='date-text'>{getCurrentDate()}</p>\n                    </div>\n                    <p className='location-text'>{getCurrentLocation()}</p>\n                </div>\n                <div>\n                <FormControl>\n                    <RadioGroup row aria-label='temperature' name='temparature unit' value={tempUnit} onChange={toggleTempUnit} >\n                        <FormControlLabel value='celcius' control={<Radio color='primary' />} label=\"Celsius\" />\n                        <FormControlLabel value='fahrenheit' control={<Radio color='primary' />} label='Fahrenheit' />\n                    </RadioGroup>\n                    </FormControl>\n                </div>\n                <div className='navigator-section'>\n                    <ArrowBack fontSize='large'/>\n                    <ArrowForward fontSize='large' />\n                </div>\n                <Grid container spacing={2} className=''>\n                    {\n                        weatherInfo !== null ?\n                        weatherInfo.map((info:Weather, index: number) => {\n                            return (\n                                <Grid item xs={12} sm={6} md={4} key={index}>\n                                    <WeatherCard unit={tempUnit} onClick={() => onWeatherCardClick(info)} weatherInfo={info} />\n                                </Grid>\n                            );\n                        })\n                        : null\n                    }          \n                </Grid>\n                {\n                    selectedInfo !== null ? <BarChart temps={selectedInfo} /> : null\n                }\n                    \n            </div>\n        </Wrapper>\n        \n    );\n}\n\nexport default WeatherInfo;","import React from 'react';\n\nimport Wrapper from './../../components/Wrapper';\nimport './loading.scss';\n\nconst Loading = ( ) => {\n    return (\n        <Wrapper>\n            <div className='loading-container'>\n                <div>\n                    <p className='loader-text'>Almost there</p>\n                    <div className=\"loader\">\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                    </div>\n                </div>\n                \n            </div>\n        </Wrapper>\n    );\n}\n\nexport default Loading;","import {Fragment} from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport WeatherInfo from './pages/WeatherInfo';\nimport Loading from './pages/Loading';\n\nconst Routes = () => {\n  const defaultPath = \"/weather-app\"\n  return (\n    <Fragment>\n      <Switch>\n        <Route exact path={defaultPath} component={Loading} />\n        <Route exact path={`${defaultPath}/info`} component={WeatherInfo} />\n      </Switch>\n    </Fragment>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport { Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes';\n\ninterface AllProps {\n  store: Store;\n}\n\nconst App = (props: AllProps) => {\n  const { store }  = props;\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store } from './store/configureStore';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}