{"version":3,"sources":["store/root/constants.ts","utils/helper.ts","store/root/weatherInfo.reducer.ts","store/root/rootReducer.ts","store/configureStore.ts","components/Wrapper/Wrapper.tsx","pages/WeatherInfo/components/BarChart/BarChart.tsx","pages/WeatherInfo/components/Weathercard/WeatherCard.tsx","components/Carousel/Carousel.tsx","store/root/action.ts","pages/WeatherInfo/WeatherInfo.tsx","pages/Loading/Loading.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WEATHER_SUCCESS","WEATHER_FAILURE","RESET","getCurrentDate","today","Date","getDay","getMonth","getDate","getFullYear","getCurrentTime","pad","getHours","getMinutes","formatDate","date","month","formatedDate","alert","getUTCFullYear","calculateAverageData","arrTemps","type","sum","forEach","temp","main","pressure","humidity","round","length","value","precision","multiplier","Math","pow","time","initialState","weatherData","appError","weatherInfo","state","action","data","cod","completeData","list","dailyTemps","reduce","dt_txt","split","push","weather","Object","keys","map","temperature","description","icon","tempCollection","message","rootReducer","combineReducers","store","middleware","compose","applyMiddleware","thunk","createStore","configureStore","Wrapper","props","children","className","Card","CardContent","BarChart","temps","unit","tableData","tickSize","showLine","valueField","argumentField","text","WeatherCard","selectedUnit","localStorage","getItem","alt","src","pages","width","weatherArray","count","currentCount","maxCount","slice","Carousel","clickGetInfo","useState","activeIndex","setActiveIndex","window","innerWidth","pageWidth","setPageWidth","pageNum","setpageNum","useEffect","updateWidth","addEventListener","removeEventListener","ArrowBack","fontSize","onClick","index","ArrowForward","carouselLoop","Grid","container","spacing","info","item","xs","sm","md","getWeatherDataPromise","city","tempUnit","a","fetch","process","toLocaleLowerCase","then","Promise","resolve","json","response","console","log","resetData","dispatch","WeatherInfo","selectedCity","React","setTempUnit","selectedInfo","setSelectedInfo","setCity","barSection","useRef","useSelector","useDispatch","history","useHistory","id","TextField","label","variant","onChange","e","cityVal","target","InputProps","endAdornment","IconButton","disabled","trim","aria-label","setItem","Search","FormControl","RadioGroup","row","name","event","toLowerCase","FormControlLabel","control","Radio","color","selectedCard","current","scrollIntoView","behavior","ref","Loading","resp","catch","Button","clear","Routes","defaultPath","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3748751.chunk.js","sourcesContent":["export const WEATHER_SUCCESS = 'WEATHER_SUCCESS';\nexport const WEATHER_FAILURE = 'WEATHER_FAILURE';\nexport const NEXT = 'NEXT';\nexport const PREVIOUS = 'PREVIOUS';\nexport const RESET = 'RESET'","export const getCurrentDate = () => {\n    const today = new Date();\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return `${weekdays[today.getDay()]}, ${months[today.getMonth()]} ${today.getDate()}, ${today.getFullYear()}`;\n};\n\nexport const getCurrentTime = () => {\n    const today = new Date();\n    return `${pad(today.getHours())}:${pad(today.getMinutes())}`;\n};\n\nexport const getAmPm = () => {\n    const today = new Date();\n    return today.getHours() >= 12 ? 'PM' : 'AM';\n}\n\nexport const convertMonthToText = (month: number) => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    return months[month];\n};\n\nexport const convertkelvinToFahrenheit = (kelvin: number) => {\n    return round((((kelvin - 273.15) * 1.8) + 32), 1);\n};\n\nexport const convertKelvinToCelcius = (kelvin: number) => {    \n    return round((kelvin - 273.15), 1);\n};\n\nexport const formatDate = (date: string) => {\n    const formatedDate = new Date(date);\n    alert('I am here')\n    alert(date);\n    return `${formatedDate.getDate()} ${convertMonthToText(formatedDate.getMonth())} ${formatedDate.getUTCFullYear()}`;\n};\n\nexport const calculateAverageData = (arrTemps: number[], type:string) => {\n    let sum:number = 0;\n    arrTemps.forEach((temp:any) => {\n        if (type === 'temperature') {\n            sum += temp.main.temp;\n        }\n        if (type === 'pressure') {\n            sum += temp.main.pressure;\n        }\n        if (type === 'humidity') {\n            sum += temp.main.humidity;\n        }\n    });\n    return round((sum / arrTemps.length), 1);\n};\n\nconst round = (value:number, precision:number) => {\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(value * multiplier) / multiplier;\n};\n\nconst pad = (time:number) =>  time < 10 ? '0' + time : time;\n","import { RESET, WEATHER_SUCCESS, WEATHER_FAILURE } from \"./constants\";\nimport Weather from \"./../../api/models/weather.model\";\nimport { calculateAverageData } from \"../../utils/helper\";\n\nconst initialState: any = {\n    weatherData: null,\n    appError: null\n  };\n\nconst weatherInfo = (state = initialState, action: any) => {\n    switch (action.type) {\n        case WEATHER_SUCCESS: {\n          if (action.data.cod === \"200\") {\n\n            //Build an array of objects in the format our interface uses.\n            //Using the Weather interface \n            // let weather: Weather[] = [];\n            const completeData = action.data.list;\n            \n            // Group temperatures per day\n            const dailyTemps = completeData.reduce((dailyTemps:any[], temp:any) => {\n              const date  = temp.dt_txt.split(' ')[0];\n\n              if (!dailyTemps[date]) {\n                dailyTemps[date] = [];\n              }\n              dailyTemps[date].push(temp);\n              return dailyTemps;\n            }, {});\n\n            //Build array of temperatures\n            let weather: Weather[] = Object.keys(dailyTemps).map(date => {\n              return {\n                temperature: calculateAverageData(dailyTemps[date], 'temperature'),\n                pressure: calculateAverageData(dailyTemps[date], 'pressure'),\n                description: dailyTemps[date][0].weather[0].description,\n                icon: dailyTemps[date][0].weather[0].icon,\n                date: dailyTemps[date][0].dt_txt,\n                humidity: calculateAverageData(dailyTemps[date], 'humidity'),\n                tempCollection: dailyTemps[date]\n              }\n            });\n\n            return {\n              ...state,\n              weatherData: weather,\n            };\n          } else {\n            return {\n              ...state,\n              appError: action.data.message\n            };\n          }\n        }\n        case WEATHER_FAILURE: {\n          return {\n            ...state,\n            weatherData: null,\n            appError: 'Ops! could not get weather data. Please try again'\n          }\n        }\n        case RESET: {\n          return {\n            ...state,\n            weatherData: null,\n            appError: null\n          }\n        }\n        default:\n          return state;\n      }\n}\n\nexport default weatherInfo;","import { combineReducers } from 'redux';\n\n//Import reducers\nimport weatherInfo from \"./weatherInfo.reducer\";\n\nconst rootReducer = combineReducers({\n    weatherInfo,\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>","import { Store, createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './root/rootReducer';\n\nexport const store =  configureStore();\n\nfunction configureStore(): Store {\n    // Build middleware\n    const middleware = compose(applyMiddleware(thunk));\n\n    //Create store\n    const store = createStore(rootReducer, {}, middleware);\n\n    return store;\n}","import React from 'react';\nimport {Card, CardContent} from '@material-ui/core';\n\nimport './wrapper.scss';\n\ninterface WrapperProps {\n    children: React.ReactChild\n}\n\nconst Wrapper = (props: WrapperProps): React.ReactElement => {\n    const {children} = props;\n    return(\n        <div className='wrapper-container'>\n            <Card className='wrapper-content'>\n                <CardContent>\n                    {children}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nexport default Wrapper;","import React from 'react';\nimport {\n  Chart,\n  BarSeries,\n  Title,\n  ArgumentAxis,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { Animation } from '@devexpress/dx-react-chart';\n\nimport './barchart.scss';\nimport Weather from '../../../../api/models/weather.model';\nimport { formatDate } from '../../../../utils/helper';\n\ninterface BarChartProps {\n    temps: Weather;\n    unit: string;\n}\n\nconst BarChart = (props: BarChartProps) => {\n    const {temps, unit } =  props;\n    const data:any = [];\n    \n    temps.tempCollection.forEach((temp:any) => {\n        const tableData = {\n            time: `${temp.main.temp}${unit === 'celcius'? 'C' : 'F'}`,\n            temperature: temp.main.temp\n        }\n        \n        data.push(tableData);\n    });\n\n    return (\n        <div className='bar-chart-container'>\n            <Chart data={data}>\n                <ArgumentAxis tickSize={3} showLine={false} />\n\n                <BarSeries\n                    valueField='temperature'\n                    argumentField='time'\n                />\n                <Title text={formatDate(temps.date)} />\n                <Animation />\n            </Chart> \n        </div>\n        \n    );\n};\n\nexport default BarChart;","import Weather from '../../../../api/models/weather.model';\nimport { formatDate } from '../../../../utils/helper';\nimport './weatherCard.scss';\n\ninterface WeatherProps {\n    weatherInfo: Weather\n}\n\nconst WeatherCard = (props: WeatherProps) => {\n    const {weatherInfo} = props;\n    const selectedUnit = localStorage.getItem('unit');\n    return (\n        <div className='weather-card-container'>\n            <div className='weather-card-justify-content'>\n                <p className='temperature-text'>\n                    <span> { weatherInfo.temperature }</span> {' '} <span>\n                        <sup>o</sup>\n                        {\n                            selectedUnit === null ? 'F'\n                            : \n                            selectedUnit === 'celcius'? 'C' : 'F'\n                        }\n                    </span>\n                </p>\n                <div className='weather-card-right'>\n                    <img className='weather-icon' alt='weather-icon' src={`https://openweathermap.org/img/wn/${weatherInfo.icon}.png`} />\n                    <p className='temp-description'>{weatherInfo.description}</p>\n                    <p className='date-text'>{formatDate(weatherInfo.date)}</p>\n                </div>\n            </div>\n            <div className='weather-card-justify-content'>\n                <div>\n                    <p className='other-title'>Avg. Pressure</p>\n                    <p className='value-title'>{weatherInfo.pressure} hPa</p>\n                </div>\n                <div className='other-data-right'>\n                    <p className='other-title'>Avg. Humidity</p>\n                    <p className='value-title'>{weatherInfo.humidity} %</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default WeatherCard;","import { useState, useEffect } from 'react';\nimport { ArrowBack, ArrowForward } from '@material-ui/icons';\nimport {  Grid } from '@material-ui/core';\n\nimport Weather from './../../api/models/weather.model';\nimport WeatherCard from './../../pages/WeatherInfo/components/Weathercard';\nimport './carousel.scss';\n\ninterface CarouselProps {\n    data: Weather[];\n    clickGetInfo: any;\n}\n\nconst pages = (data:Weather[], width:number) => {   \n    // Calculate the number of pages per device type\n    const weatherArray = [];\n\n    if (width > 531 && width < 769) {\n        //For tablets\n        for (let count = 0; count < data.length; count += 2) {\n            const currentCount = count;\n            const maxCount = (currentCount + 2) > (data.length -1) ? data.length: currentCount + 2;\n            weatherArray.push(data.slice(currentCount, maxCount));\n        } \n    } else if (width < 531) {\n        //For mobile\n        for (let count = 0; count < data.length; count ++) {\n            const currentCount = count;\n            const maxCount = (currentCount + 1) > (data.length -1) ? data.length: currentCount + 1;\n            weatherArray.push(data.slice(currentCount, maxCount));\n        } \n    } else {\n        //For laptops\n        for (let count = 0; count < data.length; count += 3) {\n            const currentCount = count;\n            const maxCount = (currentCount + 3) > (data.length -1) ? data.length: currentCount + 3;\n            weatherArray.push(data.slice(currentCount, maxCount));\n        } \n    }\n    \n    return weatherArray;\n};\n\nconst Carousel = (props: CarouselProps) => {\n    const { data, clickGetInfo } = props;\n    const [activeIndex, setActiveIndex] = useState(0);\n    const [pageWidth, setPageWidth] = useState(window.innerWidth);\n    const [pageNum, setpageNum] = useState(0);\n\n    const goToPrevSlide = () => {\n        let index = activeIndex;\n        let length = data.length;\n        if (index < 1) {\n            index = length - 1;\n        } else {\n            index--;\n        }\n        \n        setActiveIndex(index);\n\n    }\n \n    const goToNextSlide = () => {\n        let index = activeIndex;\n        let length = data.length;\n        if (index === length - 1) {\n            index = 0\n        } else {\n            index++;\n        }\n        \n        setActiveIndex(index);\n    }\n\n    useEffect(() => {\n        const updateWidth = () => {\n            setPageWidth(window.innerWidth);\n            setpageNum(pages(data, window.innerWidth).length);\n        }\n\n        updateWidth();\n        window.addEventListener('resize', updateWidth);\n        return () => window.removeEventListener(\"resize\", updateWidth);\n    }, [setPageWidth, data]);\n\n    return (\n        <div className='carousel-container'>\n            <div className='carousel-item'>\n                <div className='navigator-section'>\n                    <div>\n                        {\n                            activeIndex > 0 ?\n                            <ArrowBack fontSize='large' onClick={goToPrevSlide} />\n                            : null\n                        }\n                    </div>\n                    <div>\n                        {\n                            activeIndex <  pageNum - 1 ?\n                            <ArrowForward fontSize='large' onClick={goToNextSlide} />\n                            : null\n                        }\n                    </div>\n                </div>\n                \n                    {\n                        // loop and display every page\n                        pages(data, pageWidth).map((carouselLoop:Weather[], index: number) => {\n                            return (\n                                <div key={index}>\n                                    <Grid container spacing={2}>\n                                     {\n                                        // Loop and display every item in each page\n                                        carouselLoop.map((info:Weather, count:number) => {\n                                            return (\n                                                <Grid\n                                                    key={count}\n                                                    item\n                                                    xs={12}\n                                                    sm={6}\n                                                    md={4}\n                                                    onClick={() => clickGetInfo(info)}\n                                                    className={index === activeIndex ? 'active' : 'inactive'}\n                                                >\n                                                    <WeatherCard weatherInfo={info} />\n                                                </Grid>\n                                            );\n                                        })\n                                    }\n                                    </Grid> \n                                </div>\n                            );\n                        })\n                    }          \n                \n            </div>\n        </div>\n    );\n}\n\nexport default Carousel;","import { WEATHER_FAILURE, WEATHER_SUCCESS, RESET } from \"./constants\";\n\nconst APPID = process.env.REACT_APP_APPID;\nconst URL = process.env.REACT_APP_API_URL;\n\nconst getWeatherDataPromise = async (city:string, tempUnit:string) => {\n    const unit = tempUnit === 'celcius'? 'metric' : 'imperial'\n    try {\n        return fetch(`${URL}?q=${city.toLocaleLowerCase()}&APPID=${APPID}&units=${unit}`)\n        .then((data) => {\n            return new Promise(resolve => {\n                resolve(data.json());\n            })\n            .then(response => {\n                return response;\n            })\n        })\n    } catch (error) {\n        console.log(error);\n        \n    }\n};\n\nexport const getWeatherData = (city: string, tempUnit:string) => (dispatch: any) => {\n    return getWeatherDataPromise(city, tempUnit)\n    .then((resp) => {\n        dispatch({\n            type: WEATHER_SUCCESS,\n            data: resp,\n          });\n    })\n    .catch((resp) => {\n        console.log(\"resp error: \", resp);\n        dispatch({\n          type: WEATHER_FAILURE,\n          data: resp,\n        });\n      });\n};\n\nexport const resetData = () => (dispatch: any) => {\n    return dispatch({\n        type: RESET,\n        data: null,\n      });;\n};","import React, { useEffect, useRef } from 'react';\nimport { \n    Radio,\n    RadioGroup,\n    FormControlLabel,\n    FormControl,\n    TextField,\n    IconButton\n} from \"@material-ui/core\";\nimport { Search } from '@material-ui/icons';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Wrapper from './../../components/Wrapper';\nimport BarChart from './components/BarChart';\nimport Carousel from './../../components/Carousel';\nimport { \n    getCurrentTime,\n    getCurrentDate,\n    getAmPm,\n} from './../../utils/helper';\nimport './weatherInfo.scss';\nimport { resetData } from \"./../../store/root/action\";\nimport { RootState } from '../../store/root/rootReducer';\nimport Weather from \"./../../api/models/weather.model\";\n\nconst WeatherInfo = () => {\n    const selectedUnit = localStorage.getItem('unit');\n    const selectedCity = localStorage.getItem('city');\n    // Component state\n    const [tempUnit, setTempUnit] = React.useState<string>(selectedUnit === null? 'fahrenheit': selectedUnit);\n    const [selectedInfo, setSelectedInfo] = React.useState<Weather | null>(null);\n    const [city, setCity] = React.useState<string>(selectedCity === null? 'Munich': selectedCity);\n    const barSection = useRef<HTMLDivElement>(null);\n\n    // Redux state\n    const { weatherInfo } = useSelector((state: RootState) => ({\n        weatherInfo: state.weatherInfo.weatherData\n    }));\n    const dispatch: Dispatch<any> = useDispatch();\n    const history = useHistory();\n\n    const toggleTempUnit = (event: any) => {\n        setTempUnit(event.target.value.toLowerCase());\n        localStorage.setItem('unit', event.target.value);\n        dispatch(resetData());\n    }\n\n    const searchCity = () => {\n        localStorage.setItem('city', city);\n        dispatch(resetData());\n    }\n\n    const onWeatherCardClick = (selectedCard:Weather) => {\n        setSelectedInfo(selectedCard);\n\n        barSection.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    const changeCity = (e:any) => {\n        const cityVal:string = e.target.value;\n        setCity(cityVal);\n    }\n\n    useEffect(() => {\n        const MAIN_ROUTE = process.env.REACT_APP_MAIN_ROUTE;\n        if (weatherInfo === null) {\n            history.push(`${MAIN_ROUTE}`);\n        }\n    }, [history, weatherInfo]);\n    \n    return (\n        <Wrapper>\n            <div className='weather-info-container'>\n                <div className='current-location'>\n                    <div>\n                        <p className='time-section'>\n                            <span className='time-text' id='time-text'>{getCurrentTime()}</span> {' '}\n                            <span className='am-pm'>{getAmPm()}</span></p>\n                        <p className='date-text'>{getCurrentDate()}</p>\n                    </div>\n                    <div>\n                    <p className='location-text'>{city}</p>\n                        <TextField\n                            id='location-input'\n                            label='City'\n                            variant='outlined'\n                            value={city}\n                            onChange={changeCity}\n                            className='search-input'\n                            InputProps={\n                                {\n                                    endAdornment: \n                                    <IconButton disabled={city.trim().length === 0? true: false} aria-label=\"search\" onClick={searchCity}>\n                                        <Search />\n                                    </IconButton>\n                                }\n                            }\n                        />\n                    </div>\n                    \n                </div>\n                <div>\n                <FormControl>\n                    <RadioGroup row aria-label='temperature' name='temparature unit' value={tempUnit} onChange={toggleTempUnit} >\n                        <FormControlLabel value='celcius' control={<Radio color='primary' />} label=\"Celsius\" />\n                        <FormControlLabel value='fahrenheit' control={<Radio color='primary' />} label='Fahrenheit' />\n                    </RadioGroup>\n                    </FormControl>\n                </div>\n                {\n                    weatherInfo !== null ?\n                        <Carousel data={weatherInfo} clickGetInfo={onWeatherCardClick} />\n                        : null\n                }\n                \n                {\n                    selectedInfo !== null ? <BarChart temps={selectedInfo} unit={tempUnit} /> : null\n                }\n                <div ref={barSection} />\n            </div>\n        </Wrapper>\n        \n    );\n};\n\nexport default WeatherInfo;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from '@material-ui/core';\n\nimport Wrapper from './../../components/Wrapper';\nimport { RootState } from '../../store/root/rootReducer';\nimport { getWeatherData, resetData } from \"./../../store/root/action\";\nimport './loading.scss';\n\nconst Loading = ( ) => {\n    const selectedUnit = localStorage.getItem('unit');\n    const selectedCity = localStorage.getItem('city');\n    const { weatherInfo, appError } = useSelector((state: RootState) => ({\n        weatherInfo: state.weatherInfo.weatherData,\n        appError: state.weatherInfo.appError\n    }));\n\n    const dispatch: Dispatch<any> = useDispatch();\n    const history = useHistory();\n\n    const goBackToDefaultWeather = () => {\n        localStorage.clear();\n        dispatch(resetData());\n    }\n\n    useEffect(() => {\n        const MAIN_ROUTE = process.env.REACT_APP_MAIN_ROUTE;\n        dispatch(\n            getWeatherData(\n                selectedCity === null? 'Munich': selectedCity,\n                selectedUnit === null ? 'fahrenheit': selectedUnit\n            )\n        );\n\n        if (weatherInfo !== null) {\n            history.push(`${MAIN_ROUTE}/info`);\n        }\n    }, [dispatch, history, weatherInfo, selectedUnit, selectedCity]);\n\n    return (\n        <Wrapper>\n            <div className='loading-container'>\n                {\n                    appError !== null ?\n                    <div>\n                        <p className='loader-text'>City \"{selectedCity}\" not found!</p>\n                        <Button onClick={goBackToDefaultWeather} className='back-button' variant=\"contained\" color=\"primary\">Back</Button>\n                    </div>             \n                    :\n                    <div>\n                    <p className='loader-text'>Almost there</p>\n                    <div className=\"loader\">\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                        <div className=\"dot\" />\n                    </div>\n                </div>\n                }\n                \n                \n            </div>\n        </Wrapper>\n    );\n}\n\nexport default Loading;","import { Route, Switch, BrowserRouter as Router } from 'react-router-dom';\nimport WeatherInfo from './pages/WeatherInfo';\nimport Loading from './pages/Loading';\n\nconst Routes = () => {\n  const defaultPath = \"/weather-app\"\n  return (\n      <Router>\n        <Switch>\n          <Route exact path={defaultPath} component={Loading} />\n          <Route exact path={`${defaultPath}/info`} component={WeatherInfo} />\n        </Switch>\n      </Router>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport { Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport Routes from './routes';\n\ninterface AllProps {\n  store: Store;\n}\n\nconst App = (props: AllProps) => {\n  const { store }  = props;\n\n  return (\n    <Provider store={store}>\n      <HashRouter>\n        <Routes />\n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store } from './store/configureStore';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}